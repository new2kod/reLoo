// server/src/api/auth/routes.js
const express = require('express');
const authController = require('../../controllers/authController');
const { verifyToken } = require('../../middleware/auth');

const router = express.Router();

router.post('/register', authController.register);
router.post('/login', authController.login);
router.post('/logout', authController.logout);
router.get('/me', verifyToken, authController.getCurrentUser);
router.post('/reset-password', authController.resetPassword);
router.post('/google-auth', authController.googleAuth);
router.post('/facebook-auth', authController.facebookAuth);

module.exports = router;

// server/src/controllers/authController.js
const { auth, db } = require('../config/firebase');

// Register a new user
exports.register = async (req, res) => {
  try {
    const { email, password, name } = req.body;
    
    // Create user in Firebase Auth
    const userRecord = await auth.createUser({
      email,
      password,
      displayName: name
    });
    
    // Create user document in Firestore
    await db.collection('users').doc(userRecord.uid).set({
      email,
      name,
      createdAt: new Date().toISOString(),
      premium: false,
      preferences: {},
      savedItems: {}
    });
    
    // Create custom token
    const token = await auth.createCustomToken(userRecord.uid);
    
    res.status(201).json({
      status: 'success',
      data: {
        user: userRecord,
        token
      }
    });
  } catch (error) {
    console.error('Error creating user:', error);
    res.status(400).json({
      status: 'error',
      message: error.message
    });
  }
};

// Login user
exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;
    
    // Note: In a real implementation, you'd use Firebase Client SDK for authentication
    // This is a placeholder for backend authentication
    const user = await auth.getUserByEmail(email);
    
    // Create custom token
    const token = await auth.createCustomToken(user.uid);
    
    res.status(200).json({
      status: 'success',
      data: {
        user,
        token
      }
    });
  } catch (error) {
    console.error('Error logging in:', error);
    res.status(400).json({
      status: 'error',
      message: error.message
    });
  }
};

// Get current user
exports.getCurrentUser = async (req, res) => {
  try {
    // req.user is set by the verifyToken middleware
    const user = await auth.getUser(req.user.uid);
    
    // Get user document from Firestore
    const userDoc = await db.collection('users').doc(req.user.uid).get();
    
    res.status(200).json({
      status: 'success',
      data: {
        ...user,
        ...userDoc.data()
      }
    });
  } catch (error) {
    console.error('Error getting user:', error);
    res.status(400).json({
      status: 'error',
      message: error.message
    });
  }
};

// Additional auth methods would be implemented here
exports.logout = (req, res) => {
  // Logout is typically handled on client side
  res.status(200).json({ status: 'success' });
};

exports.resetPassword = async (req, res) => {
  try {
    const { email } = req.body;
    
    // Send password reset email
    await auth.generatePasswordResetLink(email);
    
    res.status(200).json({
      status: 'success',
      message: 'Password reset email sent'
    });
  } catch (error) {
    console.error('Error resetting password:', error);
    res.status(400).json({
      status: 'error',
      message: error.message
    });
  }
};

exports.googleAuth = async (req, res) => {
  // Implementation would depend on Firebase client-side auth
  res.status(501).json({
    status: 'error',
    message: 'Not implemented yet'
  });
};

exports.facebookAuth = async (req, res) => {
  // Implementation would depend on Firebase client-side auth
  res.status(501).json({
    status: 'error',
    message: 'Not implemented yet'
  });
};